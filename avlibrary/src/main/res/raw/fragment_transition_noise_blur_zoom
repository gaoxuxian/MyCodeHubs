precision mediump float;

const float PI = 3.141592653589793;

varying vec2 aCoordinate;
uniform sampler2D vTextureFront;
uniform sampler2D vTextureBack;
uniform float progress;

float rand (vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float Exponential_easeInOut(float begin, float change, float duration, float time) {
    if (time == 0.0)
    return begin;
    else if (time == duration)
    return begin + change;
    time = time / (duration / 2.0);
    if (time < 1.0)
    return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;
    return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;
}

// y = -0.5/2 * (cos(3.14*x/0.5)-1.0)+0 周期函数
float Sinusoidal_easeInOut(float begin, float change, float duration, float time) {
    return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;
}

float detectEdge(float value) {
    if (value > 1.) {
        return 2. - value;
    }
    if (value < 0.) {
        return -value;
    }
    return value;
}

vec3 crossFade(vec2 uv, float dissolve) {
    return mix(texture2D(vTextureFront, uv).rgb, texture2D(vTextureBack, uv).rgb, dissolve);
}

void main() {
    vec2 texCoord = aCoordinate;
    float strength = Sinusoidal_easeInOut(0.0, 0.2, 0.5, progress);
    float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);
    vec2 center = vec2(.5);
    float offset = rand(texCoord);
    vec3 color = vec3(0.0);
    float total = 0.0;
    vec2 toCenter = center - texCoord;
    for (float t = 0.; t <= 20.; t++) {
        float percent = (t + offset) / 20.0;
        float weight = 4.0 * (percent - percent * percent);
        color += crossFade(texCoord + toCenter * percent * strength, dissolve) * weight;
        total += (weight);
    }
    gl_FragColor = vec4(color / total, 1.0);
}